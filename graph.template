#include <cassert>  // Provides assert
#include <cstdlib>  // Provides size_t
#include <vector>
#include <queue>
#include <algorithm>

namespace main_savitch_15
{
  template <class Item>
  const std::size_t graph<Item>::MAXIMUM;

  // Precondition: size( ) < MAXIMUM.
  // Postcondition: The size of the graph has been increased by adding one new
  // vertex. This new vertex has the specified label and no edges.
  template <class Item>
  void graph<Item>::add_vertex(const Item& label){
    //assert(size() < MAXIMUM);
    //add label to end of labels
    labels[many_vertices] = label;
    many_vertices++;
    //add false edges
    for (std::size_t i = 0; i < many_vertices; ++i){
      edges[i][many_vertices-1] = false;
      edges[many_vertices-1][i] = false;
    }
  }

  // Precondition: (source < size( )) and (target < size( )).
  // Postcondition: The graph has all the edges that it originally had, and it
  // also has another edge from the specified source to the specified target.
  // (If this edge was already present, then the graph is unchanged.)
  template <class Item>
  void graph<Item>::add_edge(std::size_t source, std::size_t target){
    assert(source < size() && target < size());
    //if edge doesn't exist, add edge
    if(!is_edge(source, target)){
      edges[source][target] = true;
    }
  }

  // Precondition: (source < size( )) and (target < size( )).
  // Postcondition: The graph has all the edges that it originally had except
  // for the edge from the specified source to the specified target. (If this
  // edge was not originally present, then the graph is unchanged.)
  template <class Item>
  void graph<Item>::remove_edge(std::size_t source, std::size_t target){
    assert(source < size() && target < size());
    //if edge exists, remove edge
    if(is_edge(source, target)){
      edges[source][target] = false;
    }
  }

  // Precondition: vertex < size( ).
  // Postcondition: The return value is a reference to the label of the
  // specified vertex.
  template <class Item>
  Item& graph<Item>::operator [ ] (std::size_t vertex){
    assert(vertex < size());
    return labels[vertex];
  }

  template <class Item>
  bool graph<Item>::is_edge(std::size_t source, std::size_t target) const{
    assert(source < size() && target < size());
    return edges[source][target];
  }

  template <class Item>
  std::set<std::size_t> graph<Item>::neighbors(std::size_t vertex) const{
    assert(vertex < size());
    std::set<std::size_t> ret; //return value

    for(std::size_t i = 0; i < size(); i++){
      if(edges[vertex][i]){
        ret.insert(i);
      }
      return ret;
    }

  }

  template <class Item>
  Item graph<Item>::operator[ ] (std::size_t vertex) const{
    assert(vertex < size());
    return labels[vertex];
  }

  template <class Item>
  void graph<Item>::bfs(std::size_t start, std::vector<std::size_t> &parent){
    std::queue<std::size_t> q;
    q.push(start);
    parent[start] = start;

    while (!q.empty()){
        int current = q.front();
        q.pop();

        for (auto i : labels[current]){
            if(parent[i] == -1){
                parent[i] = current;
                q.push(i);
            }
        }
    }
  }

  // pre: source < size(), dest < size()
  // post: returns a path from source to dest with the least number of edges in this graph using bfs
  template <class Item>
  std::vector<std::size_t> graph<Item>::shortest_path(std::size_t source, std::size_t dest){
    assert(source < size() && dest < size());
    std::vector<std::size_t> parent(size()); // Holds parents
    bfs(source, parent);

    //if no answer is found
    if (parent[dest] == -1){
        return std::vector<std::size_t>();
    }

    //create answer vector by tracing back parents from dest word
    std::vector<std::size_t> ans;
    for(std::size_t v = dest; v != source; v = parent[v]){
        ans.push_back(v);
    }
    ans.push_back(source);

    //reverse elements of vector
    std::reverse(ans.begin(), ans.end());

    return ans;
  }

}
